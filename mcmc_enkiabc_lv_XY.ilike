#include "LV_step.h"

/***data***/
Data data()
{
  arma::mat X(16,2);
  X(0,0) = 50;
  X(1,0) = 145;
  X(2,0) = 265;
  X(3,0) = 64;
  X(4,0) = 35;
  X(5,0) = 52;
  X(6,0) = 201;
  X(7,0) = 305;
  X(8,0) = 26;
  X(9,0) = 19;
  X(10,0) = 90;
  X(11,0) = 334;
  X(12,0) = 61;
  X(13,0) = 15;
  X(14,0) = 24;
  X(15,0) = 145;
  
  X(0,1) = 100;
  X(1,1) = 93;
  X(2,1) = 248;
  X(3,1) = 341;
  X(4,1) = 166;
  X(5,1) = 79;
  X(6,1) = 54;
  X(7,1) = 331;
  X(8,1) = 364;
  X(9,1) = 129;
  X(10,1) = 50;
  X(11,1) = 137;
  X(12,1) = 508;
  X(13,1) = 194;
  X(14,1) = 65;
  X(15,1) = 40;
  
  Data data;
  data["X"] = X;
  return data;
}

/***evaluate_log_prior***/
double evaluate_log_prior(const Parameters &parameters)
{
  arma::colvec theta = parameters["θ"];
  
  if ( (theta[0]<=0) || (theta[1]<=0) || (theta[2]<=0) )
  {
    return -arma::datum::inf;
  }
  
  arma::colvec lower_bounds(3);
  lower_bounds[0] = -6.0;
  lower_bounds[1] = -6.0;
  lower_bounds[2] = -6.0;
  
  arma::colvec upper_bounds(3);
  upper_bounds[0] = 2.0;
  upper_bounds[1] = 2.0;
  upper_bounds[2] = 2.0;
  
  return dunif(log(theta),lower_bounds,upper_bounds);
}

/***simulate_data_model***/
Data simulate_data_model(RandomNumberGenerator &rng,
                    const Parameters &parameters)
{
  arma::colvec theta = parameters["θ"];
  
  arma::mat X(16,2);
  X(0,0) = 50.0;
  X(0,1) = 100.0;
  double t = 0.0;
  double dt = parameters["dt"][0];
  
  for (size_t i=1; i<16; ++i)
  {
    arma::colvec next = my_stepLVc(rng,
                                   X(i-1,0),
                                   X(i-1,1),
                                   theta,
                                   t,
                                   dt);
    
    t = t + dt;
    X(i,0) = next[0];
    X(i,1) = next[1];
  }
  
  Data output;
  output["X"] = X;
  return output;
}

/***sbi_likelihood,ilike::ienki_abc(p1,p2,ε,p3,p4,p5,p6,1000000)***/

/***data_variable***/
std::string simulated_variable()
{
  return "X";
}

/***simulate_m_proposal***/
Parameters simulate_m_proposal(RandomNumberGenerator &rng,
                               const Parameters &parameters)
{
  arma::mat cov(3,3);
  
  // epsilon = 10
  /*
  cov(0,0) = 1.113933e-03;
  cov(0,1) = 2.410182e-06;
  cov(0,2) = 1.589293e-04;
  cov(1,0) = 2.410182e-06;
  cov(1,1) = 2.209412e-08;
  cov(1,2) = 7.476011e-07;
  cov(2,0) = 1.589293e-04;
  cov(2,1) = 7.476011e-07;
  cov(2,2) = 3.943234e-04;
  */
  
  // epsilon = 1
  /*
  cov(0,0) = 7.029681e-04;
  cov(0,1) = 2.006436e-06;
  cov(0,2) = 2.045976e-05;
  cov(1,0) = 2.006436e-06;
  cov(1,1) = 1.662645e-08;
  cov(1,2) = 1.454278e-07;
  cov(2,0) = 2.045976e-05;
  cov(2,1) = 1.454278e-07;
  cov(2,2) = 2.905960e-06;
  */
  
  // epsilon = 1
  cov(0,0) = 1.162484e-03;
  cov(0,1) = 2.586242e-06;
  cov(0,2) = 5.761360e-05;
  cov(1,0) = 2.586242e-06;
  cov(1,1) = 2.084937e-08;
  cov(1,2) = 1.178067e-07;
  cov(2,0) = 5.761360e-05;
  cov(2,1) = 1.178067e-07;
  cov(2,2) = 1.150391e-04;
  
  cov = (pow(2.38,2.0)/3.0)*cov;
  
  
  // epsilon = 0.01
  /*
  cov(0,0) = 3.972211e-04;
  cov(0,1) = 3.409761e-07;
  cov(0,2) = 5.817093e-06;
  cov(1,0) = 3.409761e-07;
  cov(1,1) = 1.470827e-08;
  cov(1,2) = -4.269572e-08;
  cov(2,0) = 5.817093e-06;
  cov(2,1) = -4.269572e-08;
  cov(2,2) = 8.685325e-07;
  */

  Parameters output;
  output["θ"] = rmvnorm(rng,parameters["θ"],cov);
  return output;
}

/***mcmc_weights,c(1)***/

/***mcmc_termination,ilike::iterations(10)***/
